---
layout: post
title: How to implement Continuous Delivery with enterprise java middleware?
type: post
author: Sriram Narayan
excerpt: "In this talk, you can learn about the challenges encountered while trying to use Continuous Delivery in a Java-based enterprise environment"
summary_image: "/assets/images/blog/how-implement-continuous-delivery-enterprise-java-middleware/summary_image.png"
title_tag_of_header: "CD with Enterprise Java Middleware | GoCD Blog"
meta_description: "GoCD is open source continuous delivery software. Read how to implement continuous delivery with enterprise java middleware on the GoCD blog."
meta_keywords: "GoCD, continuous delivery, continuous delivery software, continuous integration, continuous integration software, go, goforcd, open source, enterprise, java, middleware"
date: 2014-02-24T03:00:00+00:00
---

The goal of Continuous Delivery is to move your production release frequency from months to weeks or even days. This all sounds great, but is Continuous Delivery achievable in a complex enterprise IT environment running Java EE middleware such as WebLogic, WebSphere or JBoss?

In this deck, Andrew Phillips, VP Products, XebiaLabs and I examine the challenges of Continuous Delivery in a complex environment, the key drivers and benefits for moving to Continuous Delivery and simple ways to get started. We also demonstrate a Java EE delivery pipeline using ThoughtWorks' GoCD and XebiaLabs' Deployit that helps you get started and addresses the challenges commonly encountered in enterprise environments.

<iframe width="560" height="315" src="//www.youtube.com/embed/zem2pv4SwFY" frameborder="0" allowfullscreen></iframe>

<div class="highlight">This post is also cross-posted <a href="https://www.thoughtworks.com/insights/blog/how-implement-continuous-delivery-enterprise-java-middleware">here</a>.</div>
